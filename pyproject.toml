[tool.poetry]
name = "meltanolabs-tap-snowflake"
version = "0.0.0"
description = "`tap-snowflake` is a Singer tap for Snowflake, built with the Meltano SDK for Singer Taps."
readme = "README.md"
authors = ["Meltano Team <hello@meltano.com>"]
keywords = [
    "ELT",
    "Snowflake",
]
license = "Apache 2.0"
packages = [
    { include = "tap_snowflake" },
]

[tool.poetry.dependencies]
python = ">=3.8,<3.12"
requests = "^2.25.1"
singer-sdk = "~=0.39.1"
snowflake-sqlalchemy = "1.6.1"
snowflake-connector-python = "~=3.12.1"
sqlalchemy = "~=2.0.34"
cryptography = ">=3.4.6,<42.0.0"

[tool.poetry.group.dev.dependencies]
black = "^22.3.0"
flake8 = "^3.9.2"
isort = "^5.10.1"
mypy = "^0.991"
pydocstyle = "^6.1.1"
singer-sdk = {extras = ["testing"], version = "*"}
tox = "^3.24.4"
types-requests = "^2.26.1"
ruff = "^0.6.7"

[tool.isort]
profile = "black"
multi_line_output = 3 # Vertical Hanging Indent
src_paths = "tap_snowflake"

[tool.ruff]
line-length = 88
src = ["target_snowflake"]
target-version = "py38"

[tool.ruff.lint]
ignore = [
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "ANN201",
    "ANN001",
    "ANN401",
    "TD",
    "D",
    "FIX",
    "S608",
    "EM101",
    "EM102",
    "SLF001",
]
select = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["target_snowflake"]

[build-system]
requires = ["poetry-core>=1.0.8", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.scripts]
# CLI declaration
tap-snowflake = "tap_snowflake.tap:TapSnowflake.cli"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
